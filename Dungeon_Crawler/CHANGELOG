Mon, Jan 22 : Added code that generates the dungeons, rooms, and connects them
Mon, Jan 29 : [I did not complete this assignment and I apologize]
Mon, Feb 13 : ~after 1 week break~
              Ported to professors code
              added place_pc() function that places pc in a room
              added generate_dist_map() functions for tunneling and non-tunneling monsters
              added prints for the dist_maps, display 3 representations then exit main()
	      [at 1:37 am on Tues, Feb 14] wake up in cold sweat realizing you hardcoded place_pc() to check dist maps with professors, and quickly update it to place the pc in any available room, re-zip and upload to canvas like nothing ever happened.
--------------------------------------------------------------------------------------------------------------------
Tues, Feb 20: Downloaded prof's code and began work.
	      Added structs to dungeon.h (pc struct and npc struct)
	      Added array of npc structs in dungeon struct (to track monsters)
	      In main(), added generate_monster_array that will generate an array of monsters given the size of its parameter, nummon. It saves this array in the dungeon struct. Each monster is an npc type with a speed generated by "5 + rand()%16" which returns some value in the range (5,20). Each monster also has a char identifier (it's hexadecimal representation), and an int[4] array which holds its binary representation (i.e. identifier 'a' = [1,0,1,0]). Since each bit is generated by 'rand() % 2', there is an exact 50% chance that an ability will be selected, as per the assignment spec.
	      In main(), created a place_monsters() function that places monsters randomly inside the rooms of the given parameter, dungeon_t.
	      In main(), created a 'game loop' that runs 500 times. This allows 500 moves for the monsters to reach the pc and win the game, otherwise it assumes that the monsters have gotten stuck inside an infinite loop, and ends. Inside the game loop, move_pc() is called, which locates the nearest 'ter_floor_room' material, and moves to that spot. The dungeon is then re-rendered to display the updated position. usleep() is called to allow for the human eye to percept the change, and then i is decremented, restarting the game loop;
	     In main() game loop, added a move_npc() function that moves towards the left if the PC is to the left of it, right if PC is to the right, and so on. It will not allow monsters to go through walls, only on floors or corridors. It does this with the move_npc_helper() function.
--------------------------------------------------------------------------------------------------------------------
Monday, March 5: - Downloaded prof's code and began work.
		 - Changed render_dungeon to use mvprintw() instead of putchar
		 - Added a ter_staircase_up & ter_staircase_down in dungeon.h
		 - Updated render_dungeon, render_tunnel, render_dist to include cases for ter_staircase_up and ter_staircase_down
		 - Added ncurses to Makefile and #included in all relevant files
	         - Added ncurse functionality to rlg327.c (i.e. initscr(), raw(), noecho(), etc...)
		 - In pc.c, updated pc_next_pos to, instead of moving without input, it now waits for a char (ch = getch()), and handles movement based on that char (or waiting if ch = ' ', monster list if ch - 'm').
		 - Added monster menu functionality
